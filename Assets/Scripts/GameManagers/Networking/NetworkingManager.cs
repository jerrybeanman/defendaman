using UnityEngine;
using System;
using System.Collections;
using System.Collections.Generic;
using SimpleJSON;
using System.Runtime.InteropServices;
using UnityEngine.UI;

/*Carson
Being used to denote what type of data we are sending/receiving for a given JSON object.
e.g. Player is valued at 1. If we receive a JSON object for type Player ID 1, that is "Player 1's" data.
     Projectile is defined at 2. If we receive a JSON object for type Projectile ID 3, that is "Projectile 3's" data
    
Enviroment does not have an ID associated with it, since it is one entity. The ID we use for it will always default to 0

Note: Does not start at value 0. Reason being, if JSON parser fails, it returns 0 for fail, so checking
for fail does not work 
*/
public enum DataType
{
    Player = 1, Trigger = 2, Environment = 3, StartGame = 4, ControlInformation = 5, Lobby = 6, Item = 7, UI = 8
}

public enum Protocol
{
    TCP, UDP, NA
}

/*Carson
Class used for handling sending/receiving data. The class has 2 uses:
* To send/receive data from the Networking Team's clientside code, and
* Notifying subscribed objects when new data is updated

To subscribe for an objects updates from server, you would call the public Subscribe method.
This method takes in three things:
    Callback method, which is a void method that takes in a JSONClass as a parameter
    DataType you want to receive, e.g. DataType.Player for data of a player
    int ID of which of the DataType you want to receive info from, e.g. ID 1 on DataType.Player is Player 1's data

e.g. NetworkingManager.Subscribe((JSONClass json) => {Debug.Log("Got Player 1's Data");}, DataType.Player, 1);
*/
public class NetworkingManager : MonoBehaviour
{
    
    #region Variables

    //Holds the subscriber data
    private static Dictionary<Pair<DataType, int>, List<Action<JSONClass>>> _subscribedActions = new Dictionary<Pair<DataType, int>, List<Action<JSONClass>>>();

    //List of JSON strings to be sent on the next available TCP packet 
    private static List<string> jsonTCPObjectsToSend = new List<string>();

    //List of JSON strings to be sent on the next available UDP packet
    private static List<string> jsonUDPObjectsToSend = new List<string>();
    
    public static IntPtr TCPClient { get; private set; }
    public static IntPtr UDPClient { get; private set; }

	public static NetworkingManager instance;

    #endregion

	void Awake()
	{
		if (instance == null)				//Check if instance already exists
			instance = this;				//if not, set instance to this
		else if (instance != this)			//If instance already exists and it's not this:
			Destroy(gameObject);   			//Then destroy this. This enforces our singleton pattern, meaning there can only ever be one instance of a GameManager. 
		DontDestroyOnLoad(gameObject);		//Sets this to not be destroyed when reloading scene
	}

    void Start()
    {
		if (!GameData.GameStart) 
		{
			try {
				TCPClient = TCP_CreateClient();
			} catch (Exception)
			{
				//On Windows
			}
		}
    }

    // Update is called once per frame
    void Update()
    {
        if (GameData.GameStart)
        {
            foreach (var player in GameData.LobbyData)
                update_data(receive_data());
            send_data();
        }
    }
    
    ////Code for subscribing to updates from client-server system////
    #region SubscriberSystem
    /*
    To subscribe for an objects updates from server, you would call the public Subscribe method.
    This method takes in three things:
    Callback method, which is a void method that takes in a JSONClass as a parameter
    DataType you want to receive, e.g. DataType.Player for data of a player
    int ID of which of the DataType you want to receive info from, e.g. ID 1 on DataType.Player is Player 1's data

    e.g. NetworkingManager.Subscribe((JSONClass json) => {Debug.Log("Got Player 1's Data");}, DataType.Player, 1);
    */
    public static void Subscribe(Action<JSONClass> callback, DataType dataType, int id = 0)
    {
        Pair<DataType, int> pair = new Pair<DataType, int>(dataType, id);

        if (!(_subscribedActions.ContainsKey(pair)))
        {
            _subscribedActions.Add(pair, new List<Action<JSONClass>>());
        }
        List<Action<JSONClass>> val = null;
        _subscribedActions.TryGetValue(pair, out val);
        if (val != null)
        {
            //Add our callback to the list of entries under that pair of datatype and ID.
            _subscribedActions[pair].Add(callback);
        }
    }

    public static void Unsubscribe(DataType dataType, int id = 0)
    {
        Pair<DataType, int> pair = new Pair<DataType, int>(dataType, id);
        if (_subscribedActions.ContainsKey(pair))
        {
            _subscribedActions.Remove(pair);
        }
    }

    public void update_data(string JSONGameState)
    {
        JSONArray gameObjects = null;
        try {
            gameObjects = JSON.Parse(JSONGameState).AsArray;
        } catch (Exception e) {
            Debug.Log(e.ToString());
            return;
        }
        foreach (var node in gameObjects.Children)
        {
            var obj = node.AsObject;
            int dataType = obj["DataType"].AsInt;
            int id = obj["ID"].AsInt;

            if (dataType == (int)DataType.Environment)
            {
				print("[Debug]" + GameObject.Find ("GameManager").name);
				print("[Debug]" + GameObject.Find ("GameManager").GetComponent<MapManager>().name);
				GameObject.Find ("GameManager").GetComponent<MapManager>().handle_event(id, obj);// receive_message(obj, id);
            }

            if (id != 0 || (dataType == (int)DataType.Environment || dataType == (int)DataType.StartGame))
            {
                Pair<DataType, int> pair = new Pair<DataType, int>((DataType)dataType, id);
                if (_subscribedActions.ContainsKey(pair))
                {
                    foreach (Action<JSONClass> callback in _subscribedActions[pair])
                    {
                        callback(obj);
                    }
                }
            }
        }
    }

    #endregion

    ////Code for communicating with client-server system////
    #region CommunicationWithClientSystem
    [DllImport("ClientLibrary.so")]
    public static extern IntPtr TCP_CreateClient();

	[DllImport("ClientLibrary.so")]
	public static extern void TCP_DisposeClient(IntPtr client);
	public static void TCP_DisposeClient(){
		TCP_DisposeClient(TCPClient);
	}
    [DllImport("ClientLibrary.so")]
    private static extern int TCP_ConnectToServer(IntPtr client, string ipAddress, short port);
    public static int TCP_ConnectToServer(string ipAddress, short port) {
        return TCP_ConnectToServer(TCPClient, ipAddress, port);
    }

    [DllImport("ClientLibrary.so")]
    private static extern int TCP_Send(IntPtr client, string message, int size);
    public static int TCP_Send(string message, int size) {
        return TCP_Send(TCPClient, message, size);
    }

    [DllImport("ClientLibrary.so")]
    private static extern IntPtr TCP_GetData(IntPtr client);
    public static IntPtr TCP_GetData() {
        return TCP_GetData(TCPClient);
    }

    [DllImport("ClientLibrary.so")]
    private static extern int TCP_StartReadThread(IntPtr client);
    public static int TCP_StartReadThread() {
        return TCP_StartReadThread(TCPClient);
    }

    [DllImport("ClientLibrary.so")]
    public static extern IntPtr UDP_CreateClient();

    [DllImport("ClientLibrary.so")]
    private static extern void UDP_DisposeClient(IntPtr client);
    public static void UDP_DisposeClient() {
        UDP_DisposeClient(UDPClient);
    }

    [DllImport("ClientLibrary.so")]
    private static extern int UDP_ConnectToServer(IntPtr client, string ipAddress, short port);
    public static int UDP_ConnectToServer(string ipAddress, short port) {
        return UDP_ConnectToServer(UDPClient, ipAddress, port);
    }

    [DllImport("ClientLibrary.so")]
    private static extern int UDP_Send(IntPtr client, string message, int size);
    public static int UDP_SendData(string message, int size) {
        return UDP_Send(UDPClient, message, 512);
    }

    [DllImport("ClientLibrary.so")]
    private static extern IntPtr UDP_GetData(IntPtr client);
    public static IntPtr UDP_GetData() {
        return UDP_GetData(UDPClient);
    }

    [DllImport("ClientLibrary.so")]
    private static extern int UDP_StartReadThread(IntPtr client);
    public static int UDP_StartReadThread() {
        return UDP_StartReadThread(UDPClient);
    }

    [DllImport("MapGenerationLibrary.so")]
    private static extern IntPtr GenerateMap(int seed);
    public static string GenerateMapInJSON(int seed) {
        if (Application.platform == RuntimePlatform.LinuxPlayer)
            return Marshal.PtrToStringAnsi(GenerateMap(seed));
        else
            return "[{DataType: 3, ID: 0, mapWidth: 100, mapHeight: 100, mapIDs: [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 104, 104, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 104, 104, 103, 104, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 105, 105, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 104, 104, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 104, 104, 105, 103, 104, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 105, 105, 105, 105, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 104, 104, 103, 104, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 104, 104, 105, 104, 104, 105, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 104, 105, 104, 0, 0, 0, 0, 105, 105, 105, 105, 105, 0, 0, 0, 0, 0, 0, 0, 0, 0, 105, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 105, 104, 104, 104, 104, 105, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 103, 104, 104, 104, 105, 105, 105, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 104, 105, 105, 106, 104, 0, 0, 104, 104, 105, 104, 104, 104, 105, 104, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 105, 105, 105, 104, 105, 104, 104, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 104, 104, 104, 104, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 104, 104, 104, 104, 105, 104, 104, 105, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 104, 104, 104, 105, 104, 105, 103, 104, 104, 104, 104, 105, 104, 104, 103, 104, 103, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 105, 105, 105, 104, 105, 105, 105, 105, 0, 0, 0, 0, 104, 104, 104, 0, 0, 0, 0], [0, 104, 104, 104, 104, 104, 104, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 104, 104, 104, 104, 104, 104, 104, 0, 0, 0, 0, 0, 0, 105, 105, 104, 0, 0, 0, 0, 0, 103, 104, 105, 104, 105, 105, 103, 104, 104, 104, 104, 105, 105, 104, 104, 103, 104, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 105, 105, 105, 105, 105, 105, 104, 104, 104, 0, 0, 105, 105, 105, 105, 105, 0, 0, 0], [0, 104, 105, 105, 105, 105, 105, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 104, 104, 104, 103, 104, 104, 105, 0, 0, 0, 0, 0, 105, 103, 104, 104, 104, 0, 0, 0, 103, 105, 106, 104, 103, 104, 104, 104, 105, 104, 104, 104, 105, 105, 105, 103, 105, 105, 105, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 105, 105, 105, 103, 104, 104, 105, 104, 104, 105, 103, 104, 105, 105, 105, 104, 0, 0, 0], [0, 0, 103, 105, 105, 105, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 104, 104, 104, 104, 104, 104, 104, 104, 0, 0, 0, 0, 0, 104, 104, 105, 105, 104, 103, 104, 104, 104, 104, 104, 103, 102, 105, 103, 104, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 104, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 104, 105, 105, 104, 104, 105, 104, 104, 104, 105, 105, 104, 105, 105, 104, 104, 0, 0, 0], [0, 0, 105, 105, 105, 0, 0, 0, 0, 0, 0, 0, 0, 0, 105, 104, 0, 0, 104, 104, 0, 0, 0, 0, 0, 105, 104, 104, 104, 104, 103, 104, 104, 105, 0, 0, 0, 0, 105, 104, 104, 105, 104, 104, 104, 104, 103, 104, 105, 103, 103, 104, 104, 104, 105, 104, 104, 103, 105, 104, 105, 103, 105, 103, 104, 104, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 103, 104, 104, 104, 105, 105, 105, 103, 104, 104, 105, 105, 104, 105, 104, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 105, 104, 104, 104, 104, 104, 104, 105, 104, 104, 104, 105, 104, 105, 104, 103, 103, 104, 105, 104, 105, 105, 0, 0, 105, 105, 104, 104, 104, 104, 105, 105, 104, 104, 104, 105, 103, 104, 104, 104, 105, 105, 105, 104, 102, 104, 104, 104, 105, 104, 103, 104, 104, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 103, 103, 103, 105, 104, 105, 105, 105, 105, 104, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 105, 105, 104, 104, 104, 104, 104, 105, 105, 103, 104, 104, 104, 105, 104, 104, 104, 104, 104, 104, 105, 105, 105, 105, 105, 105, 105, 104, 105, 105, 104, 104, 105, 105, 103, 104, 104, 104, 104, 104, 105, 105, 105, 105, 105, 104, 103, 103, 105, 104, 104, 104, 105, 104, 0, 0, 0, 0, 0, 105, 104, 0, 0, 0, 0, 0, 0, 0, 0, 105, 103, 105, 105, 105, 104, 104, 104, 103, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 104, 105, 104, 104, 104, 104, 104, 105, 104, 105, 104, 104, 104, 105, 104, 105, 105, 104, 103, 104, 105, 105, 105, 106, 105, 106, 105, 103, 104, 105, 105, 106, 105, 105, 104, 105, 105, 104, 103, 105, 104, 104, 104, 104, 105, 105, 104, 105, 104, 105, 103, 105, 105, 105, 104, 0, 0, 0, 0, 104, 104, 104, 105, 0, 0, 0, 0, 0, 0, 104, 103, 104, 105, 105, 105, 104, 104, 104, 104, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 102, 103, 105, 103, 105, 104, 104, 105, 105, 104, 104, 104, 104, 104, 104, 103, 105, 105, 105, 105, 105, 104, 105, 104, 105, 105, 105, 105, 105, 105, 105, 106, 105, 106, 104, 105, 105, 105, 105, 103, 105, 105, 104, 104, 104, 105, 105, 104, 105, 104, 105, 104, 105, 105, 104, 0, 0, 0, 0, 104, 104, 104, 104, 0, 0, 0, 0, 0, 0, 105, 103, 103, 104, 104, 104, 105, 105, 105, 105, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 105, 105, 105, 104, 105, 105, 104, 104, 105, 104, 104, 105, 105, 104, 104, 105, 105, 105, 105, 105, 105, 105, 105, 104, 105, 105, 105, 105, 105, 105, 106, 106, 105, 104, 105, 105, 104, 105, 105, 105, 104, 104, 104, 105, 104, 105, 104, 105, 105, 105, 105, 104, 105, 103, 0, 0, 0, 0, 0, 105, 105, 0, 0, 0, 0, 0, 0, 0, 0, 103, 103, 104, 104, 104, 105, 105, 105, 105, 104, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 105, 105, 105, 105, 105, 104, 105, 105, 104, 106, 105, 104, 104, 104, 104, 104, 0, 0, 103, 104, 105, 105, 104, 104, 104, 104, 105, 103, 105, 106, 104, 104, 104, 104, 104, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 104, 104, 104, 104, 105, 104, 104, 105, 104, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 105, 105, 104, 104, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 103, 104, 104, 104, 104, 105, 104, 106, 105, 105, 104, 105, 104, 105, 0, 0, 0, 0, 103, 104, 105, 104, 104, 105, 105, 104, 103, 105, 104, 105, 103, 102, 104, 105, 104, 105, 105, 104, 103, 105, 105, 104, 105, 103, 103, 104, 104, 104, 104, 103, 104, 104, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 105, 105, 104, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 104, 104, 103, 104, 104, 104, 105, 105, 105, 105, 105, 102, 104, 104, 0, 0, 0, 0, 104, 103, 104, 104, 105, 105, 105, 104, 103, 104, 105, 102, 104, 104, 104, 105, 104, 104, 104, 104, 104, 104, 105, 0, 0, 105, 105, 104, 104, 104, 104, 104, 103, 104, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 105, 105, 105, 104, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 104, 104, 104, 105, 104, 104, 104, 104, 104, 104, 104, 103, 104, 104, 103, 0, 0, 105, 105, 105, 104, 104, 104, 104, 105, 104, 104, 103, 104, 103, 104, 104, 104, 105, 105, 104, 104, 104, 104, 105, 0, 0, 0, 0, 105, 104, 105, 104, 104, 104, 104, 104, 104, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 104, 105, 105, 105, 104, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 105, 105, 104, 104, 104, 105, 104, 105, 105, 105, 105, 105, 104, 105, 103, 104, 105, 105, 105, 105, 105, 103, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 103, 104, 104, 104, 0, 0, 0, 0, 105, 105, 104, 104, 104, 103, 103, 103, 104, 104, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 105, 105, 105, 104, 104, 104, 105, 105, 103, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 104, 105, 104, 104, 105, 104, 104, 105, 105, 105, 105, 105, 104, 104, 104, 105, 104, 105, 104, 105, 105, 105, 105, 105, 104, 104, 104, 104, 104, 104, 104, 105, 103, 104, 103, 103, 105, 104, 105, 105, 105, 105, 0, 0, 0, 0, 105, 105, 105, 104, 105, 104, 105, 102, 104, 104, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 104, 104, 103, 104, 105, 105, 104, 104, 105, 104, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 104, 104, 104, 105, 104, 105, 104, 104, 104, 104, 104, 104, 104, 0, 0, 0, 0, 0, 0, 103, 104, 105, 104, 104, 104, 103, 104, 105, 103, 104, 105, 104, 104, 102, 104, 104, 104, 104, 104, 104, 105, 105, 104, 0, 0, 0, 105, 105, 104, 105, 105, 104, 104, 104, 103, 105, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 104, 104, 105, 104, 104, 105, 104, 105, 104, 105, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 105, 105, 104, 104, 104, 105, 105, 104, 103, 104, 104, 0, 0, 0, 0, 0, 0, 0, 0, 105, 104, 104, 103, 104, 104, 103, 105, 103, 104, 102, 104, 102, 104, 104, 104, 104, 104, 104, 105, 105, 105, 104, 103, 0, 105, 105, 105, 105, 105, 105, 105, 104, 105, 105, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 104, 105, 104, 104, 105, 105, 104, 104, 103, 103, 104, 105, 0, 0, 0, 0, 0, 0], [0, 0, 0, 105, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 105, 105, 105, 105, 104, 0, 0, 104, 103, 103, 0, 0, 0, 0, 0, 0, 0, 0, 105, 104, 103, 104, 104, 104, 104, 103, 104, 104, 104, 105, 103, 103, 104, 104, 104, 105, 105, 105, 105, 105, 105, 105, 103, 104, 104, 104, 104, 101, 105, 104, 105, 104, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 104, 104, 105, 105, 104, 104, 105, 104, 104, 104, 104, 104, 105, 105, 0, 0, 0, 0, 0], [0, 0, 105, 105, 104, 0, 0, 0, 0, 0, 0, 0, 0, 0, 105, 105, 105, 104, 0, 0, 0, 0, 105, 104, 0, 0, 0, 0, 0, 0, 0, 104, 104, 105, 104, 105, 105, 104, 104, 106, 104, 104, 104, 104, 104, 104, 104, 104, 104, 105, 105, 104, 104, 104, 104, 106, 104, 104, 104, 104, 104, 104, 104, 104, 105, 104, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 104, 104, 104, 104, 105, 104, 105, 105, 104, 104, 104, 104, 104, 103, 104, 0, 0, 0, 0, 0], [0, 0, 105, 105, 105, 0, 0, 0, 0, 0, 0, 0, 0, 103, 105, 105, 105, 105, 0, 0, 0, 0, 104, 103, 102, 0, 0, 0, 0, 0, 0, 105, 105, 104, 105, 105, 105, 106, 106, 105, 105, 104, 104, 105, 0, 0, 104, 105, 104, 106, 104, 103, 104, 104, 102, 104, 105, 105, 104, 104, 104, 104, 104, 105, 104, 104, 103, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 103, 104, 104, 104, 104, 105, 105, 104, 103, 103, 103, 105, 104, 104, 104, 0, 0, 0, 0, 0], [0, 0, 106, 105, 103, 0, 0, 0, 0, 0, 0, 0, 105, 104, 104, 104, 104, 105, 105, 0, 0, 104, 104, 105, 104, 105, 0, 0, 0, 0, 105, 104, 104, 104, 104, 105, 104, 104, 105, 104, 104, 104, 104, 0, 0, 0, 0, 104, 105, 104, 105, 104, 104, 103, 104, 104, 104, 104, 105, 104, 104, 103, 104, 104, 103, 104, 105, 104, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 104, 104, 104, 104, 103, 104, 105, 104, 104, 104, 105, 105, 105, 104, 105, 0, 0, 0, 0, 0], [0, 0, 104, 105, 105, 0, 0, 0, 0, 0, 0, 0, 105, 105, 104, 105, 105, 105, 105, 105, 104, 104, 104, 103, 104, 105, 105, 105, 104, 105, 103, 105, 103, 105, 104, 105, 104, 104, 104, 105, 104, 103, 103, 0, 0, 0, 0, 0, 105, 105, 104, 104, 104, 104, 104, 105, 104, 104, 103, 105, 104, 104, 103, 103, 105, 105, 105, 104, 104, 0, 0, 0, 0, 0, 0, 0, 104, 104, 0, 0, 0, 104, 104, 104, 105, 104, 104, 104, 105, 105, 105, 105, 104, 105, 103, 0, 0, 0, 0, 0], [0, 0, 104, 104, 104, 0, 0, 0, 0, 0, 0, 105, 106, 105, 104, 104, 105, 104, 104, 104, 105, 104, 104, 104, 104, 104, 105, 105, 104, 103, 104, 104, 104, 104, 104, 104, 104, 103, 105, 105, 103, 102, 103, 0, 0, 0, 0, 0, 0, 0, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 105, 105, 105, 104, 104, 105, 104, 0, 0, 0, 0, 104, 104, 104, 104, 0, 0, 104, 104, 104, 105, 104, 104, 105, 105, 105, 103, 105, 105, 105, 105, 0, 0, 0, 0, 0], [0, 0, 105, 105, 105, 0, 0, 0, 0, 0, 0, 105, 105, 105, 105, 104, 104, 104, 105, 104, 104, 103, 104, 104, 105, 104, 105, 104, 105, 103, 103, 103, 105, 104, 103, 104, 104, 104, 105, 105, 103, 104, 0, 0, 0, 0, 0, 0, 0, 0, 0, 104, 104, 104, 104, 105, 104, 104, 103, 105, 104, 104, 103, 105, 105, 105, 104, 104, 103, 104, 104, 104, 0, 0, 0, 105, 103, 103, 104, 104, 104, 104, 104, 104, 104, 104, 105, 105, 104, 104, 104, 104, 105, 105, 104, 0, 0, 0, 0, 0], [0, 0, 105, 104, 0, 0, 0, 0, 0, 0, 0, 104, 105, 104, 105, 104, 104, 105, 105, 104, 104, 104, 104, 104, 105, 105, 104, 105, 104, 104, 104, 105, 105, 105, 105, 104, 104, 103, 105, 104, 104, 103, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 103, 104, 105, 105, 105, 104, 105, 104, 104, 103, 104, 105, 105, 104, 104, 104, 104, 104, 105, 104, 105, 105, 105, 103, 105, 104, 104, 103, 104, 104, 105, 105, 105, 103, 104, 104, 105, 104, 104, 105, 105, 104, 104, 0, 0, 0, 0, 0], [0, 0, 105, 105, 0, 0, 0, 0, 0, 0, 105, 105, 105, 105, 103, 104, 105, 104, 105, 104, 104, 104, 104, 105, 106, 105, 105, 105, 105, 105, 105, 105, 105, 105, 103, 104, 104, 104, 103, 104, 104, 104, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 105, 105, 105, 105, 104, 103, 104, 105, 104, 104, 105, 105, 104, 105, 103, 105, 103, 104, 105, 105, 105, 105, 105, 105, 105, 105, 104, 104, 104, 104, 105, 104, 105, 104, 104, 104, 104, 105, 104, 104, 105, 105, 104, 105, 0, 0, 0, 0], [0, 103, 106, 104, 0, 0, 0, 0, 0, 0, 105, 105, 105, 104, 105, 104, 104, 105, 104, 104, 104, 104, 104, 103, 105, 105, 105, 104, 105, 105, 106, 104, 105, 104, 103, 103, 104, 103, 104, 104, 104, 105, 104, 0, 0, 0, 0, 0, 0, 0, 0, 0, 105, 105, 105, 104, 104, 104, 104, 104, 104, 105, 104, 104, 105, 104, 104, 105, 104, 104, 104, 105, 104, 105, 105, 105, 105, 104, 105, 105, 104, 105, 104, 104, 104, 103, 104, 105, 105, 104, 104, 104, 104, 105, 105, 104, 0, 0, 0, 0], [0, 104, 105, 105, 0, 0, 0, 0, 0, 0, 0, 105, 105, 105, 105, 105, 104, 105, 105, 105, 103, 104, 104, 104, 105, 104, 105, 105, 104, 105, 105, 104, 104, 103, 104, 104, 103, 104, 104, 105, 105, 103, 104, 0, 0, 0, 0, 0, 0, 0, 0, 105, 105, 104, 104, 104, 103, 104, 104, 103, 105, 104, 104, 103, 104, 104, 104, 104, 105, 105, 105, 105, 104, 105, 104, 105, 105, 103, 105, 104, 105, 104, 105, 103, 104, 104, 104, 105, 105, 105, 104, 104, 104, 104, 105, 105, 103, 0, 0, 0], [0, 104, 104, 104, 0, 0, 0, 0, 0, 0, 0, 0, 103, 105, 104, 105, 104, 105, 106, 104, 104, 105, 105, 105, 105, 105, 104, 104, 104, 104, 104, 105, 105, 103, 103, 104, 104, 105, 105, 105, 104, 104, 104, 0, 0, 0, 0, 0, 105, 105, 105, 103, 105, 104, 104, 105, 105, 105, 104, 104, 104, 105, 105, 104, 104, 103, 104, 104, 103, 105, 105, 105, 105, 104, 105, 105, 105, 104, 103, 104, 105, 105, 103, 105, 105, 104, 104, 104, 103, 104, 105, 104, 104, 105, 104, 105, 105, 0, 0, 0], [0, 103, 105, 105, 105, 0, 0, 0, 0, 0, 0, 0, 0, 104, 104, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 104, 104, 105, 104, 103, 104, 104, 103, 103, 104, 105, 105, 105, 105, 105, 105, 105, 105, 0, 0, 0, 0, 104, 105, 105, 105, 104, 104, 105, 105, 105, 105, 104, 104, 105, 0, 0, 105, 105, 104, 104, 104, 105, 104, 105, 105, 105, 103, 105, 104, 105, 105, 0, 0, 103, 103, 103, 105, 104, 104, 104, 104, 104, 103, 105, 104, 105, 105, 105, 105, 104, 105, 104, 0, 0], [0, 104, 105, 105, 105, 105, 0, 0, 0, 0, 0, 0, 0, 104, 105, 104, 106, 105, 105, 105, 105, 104, 105, 105, 105, 104, 104, 105, 105, 103, 104, 103, 104, 104, 104, 105, 105, 105, 105, 106, 105, 105, 105, 0, 0, 0, 0, 104, 104, 105, 104, 104, 104, 105, 105, 104, 104, 105, 104, 0, 0, 0, 0, 104, 105, 104, 104, 105, 104, 105, 105, 104, 104, 105, 105, 105, 0, 0, 0, 0, 103, 104, 105, 104, 105, 104, 104, 104, 105, 105, 105, 105, 105, 105, 104, 104, 105, 104, 104, 0], [0, 103, 105, 105, 105, 104, 0, 0, 0, 0, 0, 0, 0, 104, 105, 106, 106, 105, 105, 105, 105, 104, 104, 104, 104, 104, 104, 104, 105, 104, 104, 105, 104, 104, 104, 104, 104, 104, 105, 105, 105, 104, 104, 0, 0, 0, 0, 0, 104, 104, 104, 104, 105, 106, 105, 104, 105, 105, 105, 0, 0, 0, 0, 105, 104, 104, 104, 104, 105, 105, 104, 104, 105, 104, 104, 105, 0, 0, 0, 0, 104, 103, 104, 104, 104, 105, 103, 104, 104, 104, 104, 104, 104, 105, 105, 105, 105, 106, 104, 0], [0, 104, 104, 104, 104, 105, 0, 0, 0, 0, 0, 0, 0, 103, 104, 105, 104, 104, 105, 105, 105, 104, 103, 104, 104, 105, 103, 105, 104, 104, 104, 104, 105, 105, 104, 104, 104, 105, 104, 105, 105, 104, 105, 104, 0, 0, 0, 0, 104, 103, 104, 105, 105, 106, 105, 105, 105, 104, 105, 105, 0, 0, 0, 0, 104, 104, 104, 105, 105, 104, 104, 104, 104, 105, 105, 0, 0, 0, 0, 0, 105, 104, 105, 105, 104, 104, 105, 105, 104, 104, 104, 103, 102, 104, 105, 105, 105, 105, 105, 0], [0, 0, 104, 105, 103, 104, 0, 0, 0, 0, 0, 0, 0, 0, 104, 104, 104, 104, 104, 106, 103, 104, 105, 105, 104, 105, 104, 104, 104, 104, 104, 103, 105, 105, 105, 105, 104, 105, 105, 105, 105, 104, 104, 103, 0, 0, 0, 0, 104, 104, 105, 105, 105, 105, 105, 104, 105, 105, 104, 105, 0, 0, 0, 0, 104, 104, 105, 104, 105, 104, 104, 104, 104, 105, 0, 0, 0, 0, 0, 0, 104, 103, 104, 104, 105, 105, 105, 105, 105, 104, 104, 104, 104, 103, 104, 105, 105, 106, 104, 0], [0, 0, 0, 105, 104, 105, 0, 0, 0, 0, 0, 0, 0, 0, 104, 103, 104, 104, 105, 104, 104, 104, 103, 104, 105, 105, 105, 104, 104, 104, 104, 104, 104, 104, 105, 104, 104, 104, 105, 104, 104, 105, 104, 103, 0, 0, 0, 0, 0, 106, 103, 104, 105, 105, 104, 106, 106, 105, 105, 105, 0, 0, 0, 0, 104, 104, 105, 104, 105, 104, 104, 104, 104, 104, 0, 0, 0, 0, 0, 0, 104, 104, 104, 104, 104, 104, 105, 104, 102, 104, 103, 104, 104, 104, 104, 104, 105, 104, 105, 0], [0, 0, 0, 105, 104, 105, 105, 0, 0, 0, 0, 0, 0, 104, 105, 104, 105, 104, 103, 104, 104, 104, 104, 104, 105, 104, 104, 104, 104, 104, 104, 104, 105, 105, 105, 104, 104, 104, 104, 104, 104, 104, 103, 104, 0, 0, 0, 0, 0, 0, 105, 105, 105, 104, 105, 104, 105, 105, 104, 103, 0, 0, 0, 0, 0, 103, 104, 105, 104, 104, 104, 104, 104, 103, 104, 0, 0, 0, 0, 0, 104, 104, 103, 103, 104, 105, 105, 105, 104, 103, 104, 105, 105, 104, 104, 106, 105, 105, 103, 0], [0, 0, 0, 103, 105, 105, 105, 0, 0, 0, 0, 0, 105, 103, 103, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 105, 105, 104, 104, 103, 104, 104, 104, 103, 104, 104, 104, 103, 105, 104, 105, 104, 104, 104, 0, 0, 0, 0, 0, 0, 106, 105, 105, 104, 104, 104, 104, 105, 104, 104, 104, 0, 0, 0, 0, 0, 104, 105, 105, 105, 104, 104, 105, 103, 104, 105, 0, 0, 0, 0, 0, 105, 105, 105, 105, 105, 104, 105, 105, 104, 104, 104, 105, 104, 105, 104, 105, 105, 104, 0], [0, 0, 0, 104, 105, 104, 105, 104, 0, 0, 0, 0, 104, 104, 104, 104, 104, 104, 105, 104, 105, 104, 103, 103, 104, 104, 105, 104, 104, 104, 104, 105, 104, 103, 104, 104, 104, 104, 103, 104, 105, 104, 104, 104, 104, 0, 0, 0, 0, 105, 105, 105, 105, 105, 104, 104, 104, 104, 104, 105, 104, 0, 0, 0, 0, 0, 105, 105, 105, 104, 104, 103, 105, 104, 104, 105, 104, 0, 0, 0, 0, 104, 105, 105, 104, 104, 105, 105, 104, 105, 105, 104, 105, 105, 104, 105, 104, 104, 104, 0], [0, 0, 104, 104, 104, 105, 104, 105, 0, 0, 0, 0, 104, 104, 104, 104, 104, 104, 104, 105, 104, 105, 104, 104, 104, 105, 104, 104, 105, 104, 104, 105, 105, 104, 104, 103, 103, 103, 103, 104, 104, 105, 105, 104, 104, 0, 0, 0, 0, 105, 105, 105, 105, 105, 104, 104, 104, 104, 103, 104, 105, 104, 0, 0, 0, 105, 105, 105, 105, 105, 103, 103, 104, 105, 105, 104, 103, 0, 0, 0, 105, 105, 105, 105, 104, 104, 102, 104, 105, 104, 104, 104, 105, 0, 0, 103, 102, 103, 104, 0], [0, 103, 104, 104, 104, 104, 105, 104, 0, 0, 0, 0, 105, 105, 105, 104, 104, 104, 104, 105, 105, 104, 104, 103, 104, 104, 105, 104, 105, 104, 104, 104, 105, 104, 104, 105, 103, 104, 104, 104, 105, 105, 105, 104, 104, 104, 0, 0, 0, 0, 104, 104, 104, 105, 104, 104, 105, 105, 104, 105, 105, 105, 105, 103, 105, 105, 105, 105, 105, 104, 104, 104, 104, 104, 104, 105, 105, 104, 105, 105, 105, 105, 105, 105, 104, 105, 104, 104, 104, 104, 104, 105, 0, 0, 0, 0, 104, 104, 0, 0], [0, 104, 104, 105, 105, 103, 104, 104, 0, 0, 0, 0, 104, 104, 103, 104, 105, 105, 105, 104, 104, 104, 104, 104, 104, 104, 104, 104, 105, 105, 104, 104, 104, 105, 105, 105, 104, 103, 105, 104, 105, 105, 104, 104, 103, 104, 0, 0, 0, 0, 104, 103, 104, 105, 105, 104, 105, 105, 105, 105, 103, 105, 104, 103, 105, 104, 104, 105, 105, 104, 105, 105, 105, 105, 105, 105, 105, 105, 105, 103, 105, 104, 104, 105, 105, 105, 105, 104, 104, 105, 105, 104, 0, 0, 0, 0, 0, 0, 0, 0], [0, 104, 104, 105, 104, 104, 104, 104, 104, 0, 0, 104, 104, 102, 104, 105, 104, 105, 105, 103, 104, 104, 104, 105, 104, 104, 104, 104, 105, 104, 104, 104, 103, 104, 105, 105, 105, 104, 105, 104, 104, 104, 104, 102, 104, 104, 0, 0, 0, 0, 105, 105, 104, 104, 105, 105, 104, 104, 105, 105, 105, 104, 103, 104, 104, 104, 104, 104, 105, 104, 105, 103, 104, 105, 105, 104, 105, 105, 104, 104, 104, 104, 104, 105, 105, 105, 104, 105, 105, 105, 105, 105, 105, 0, 0, 0, 0, 0, 0, 0], [0, 104, 105, 105, 105, 104, 104, 104, 104, 103, 103, 104, 104, 104, 103, 104, 104, 105, 104, 104, 104, 104, 104, 104, 103, 103, 104, 104, 104, 103, 104, 104, 105, 105, 105, 105, 105, 106, 105, 104, 105, 105, 103, 104, 104, 104, 104, 0, 0, 105, 105, 104, 104, 104, 104, 104, 104, 104, 104, 105, 105, 104, 103, 102, 104, 105, 104, 104, 104, 104, 103, 104, 104, 105, 104, 105, 104, 104, 105, 105, 103, 104, 105, 104, 104, 105, 104, 105, 105, 105, 105, 104, 103, 105, 0, 0, 0, 0, 0, 0], [0, 104, 105, 104, 105, 104, 103, 104, 105, 104, 104, 103, 105, 104, 103, 104, 105, 105, 104, 104, 104, 104, 104, 104, 103, 104, 105, 104, 104, 104, 104, 104, 103, 103, 105, 105, 105, 105, 0, 105, 105, 103, 104, 104, 105, 104, 105, 105, 105, 105, 105, 105, 105, 104, 103, 104, 104, 105, 104, 104, 104, 104, 103, 103, 104, 104, 104, 104, 104, 104, 104, 104, 105, 104, 104, 105, 104, 105, 104, 105, 105, 105, 105, 105, 105, 105, 105, 104, 105, 105, 104, 105, 104, 105, 105, 0, 0, 0, 0, 0], [0, 104, 104, 105, 105, 104, 104, 105, 105, 104, 103, 104, 105, 103, 103, 104, 105, 105, 104, 104, 104, 104, 105, 105, 105, 105, 105, 104, 104, 104, 104, 104, 105, 105, 104, 105, 104, 0, 0, 0, 104, 105, 105, 105, 105, 105, 104, 104, 105, 105, 105, 105, 104, 105, 104, 105, 104, 104, 104, 104, 105, 104, 105, 104, 103, 104, 105, 104, 102, 104, 104, 106, 105, 105, 105, 104, 105, 105, 105, 105, 104, 104, 105, 105, 105, 105, 104, 105, 104, 105, 105, 104, 105, 105, 105, 0, 0, 0, 0, 0], [0, 104, 104, 104, 105, 104, 104, 104, 104, 104, 104, 104, 105, 105, 105, 105, 105, 105, 104, 104, 104, 103, 105, 105, 105, 105, 105, 105, 104, 104, 104, 104, 104, 105, 104, 104, 104, 0, 0, 0, 104, 105, 105, 105, 104, 104, 104, 105, 105, 105, 105, 104, 105, 104, 104, 104, 104, 104, 104, 104, 104, 105, 105, 105, 104, 103, 104, 103, 104, 104, 105, 102, 104, 105, 103, 105, 104, 104, 105, 104, 105, 104, 104, 104, 105, 105, 104, 105, 104, 104, 105, 105, 105, 106, 105, 0, 0, 0, 0, 0], [0, 0, 105, 105, 105, 104, 104, 105, 105, 105, 104, 104, 104, 104, 105, 105, 104, 105, 104, 104, 105, 106, 105, 104, 105, 105, 105, 105, 105, 103, 105, 104, 105, 104, 104, 104, 105, 104, 0, 0, 0, 104, 105, 104, 104, 105, 105, 105, 105, 104, 104, 104, 105, 105, 104, 104, 104, 104, 104, 104, 104, 104, 105, 105, 104, 105, 104, 104, 104, 104, 105, 104, 104, 104, 104, 104, 104, 103, 105, 104, 104, 104, 104, 104, 105, 105, 105, 105, 104, 104, 104, 105, 106, 105, 106, 105, 0, 0, 0, 0], [0, 0, 104, 104, 105, 105, 104, 105, 104, 104, 105, 104, 103, 104, 105, 104, 104, 105, 104, 104, 105, 105, 106, 105, 105, 105, 105, 105, 103, 103, 104, 105, 104, 104, 104, 104, 104, 105, 104, 0, 0, 0, 0, 0, 104, 105, 105, 105, 105, 104, 104, 105, 105, 104, 104, 105, 104, 104, 104, 104, 104, 104, 105, 104, 102, 104, 105, 105, 104, 105, 104, 104, 105, 105, 105, 104, 105, 104, 105, 104, 104, 104, 105, 105, 104, 104, 105, 105, 105, 105, 104, 104, 104, 104, 104, 105, 105, 0, 0, 0], [0, 0, 104, 104, 104, 105, 105, 104, 104, 103, 104, 104, 105, 105, 104, 104, 104, 104, 104, 105, 105, 105, 105, 105, 105, 105, 105, 105, 103, 104, 105, 0, 0, 0, 104, 104, 105, 105, 105, 105, 0, 0, 0, 0, 0, 105, 104, 105, 105, 105, 105, 104, 104, 104, 102, 105, 105, 104, 105, 104, 105, 104, 105, 104, 105, 105, 105, 105, 104, 105, 105, 105, 105, 105, 105, 105, 105, 104, 105, 104, 105, 104, 104, 105, 105, 103, 104, 105, 105, 105, 105, 105, 104, 105, 105, 105, 104, 104, 0, 0], [0, 0, 104, 105, 104, 104, 105, 105, 104, 104, 103, 104, 105, 105, 105, 104, 104, 104, 105, 103, 105, 104, 104, 104, 104, 105, 105, 104, 104, 104, 0, 0, 0, 0, 0, 105, 105, 105, 105, 104, 103, 0, 0, 0, 0, 105, 104, 105, 104, 105, 105, 104, 104, 105, 105, 105, 105, 105, 105, 104, 105, 103, 104, 105, 103, 105, 105, 104, 104, 104, 105, 105, 105, 105, 104, 104, 104, 105, 105, 105, 104, 104, 104, 105, 104, 105, 105, 106, 105, 105, 105, 104, 104, 104, 104, 104, 105, 103, 0, 0], [0, 0, 105, 104, 104, 105, 104, 105, 105, 104, 104, 104, 105, 104, 104, 104, 104, 105, 104, 104, 104, 103, 104, 0, 0, 0, 105, 104, 104, 0, 0, 0, 0, 0, 0, 0, 105, 104, 103, 104, 104, 0, 0, 0, 0, 0, 104, 105, 104, 104, 103, 105, 104, 104, 104, 105, 105, 104, 104, 104, 103, 104, 104, 104, 105, 105, 104, 104, 104, 0, 0, 104, 104, 104, 104, 104, 104, 105, 105, 105, 105, 104, 104, 104, 104, 105, 105, 105, 105, 105, 105, 105, 105, 105, 104, 104, 105, 103, 103, 0], [0, 0, 0, 105, 104, 104, 105, 104, 104, 104, 105, 105, 105, 104, 102, 104, 105, 104, 104, 104, 103, 103, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 105, 104, 104, 104, 104, 105, 0, 0, 0, 0, 105, 105, 105, 105, 104, 103, 104, 103, 104, 104, 105, 104, 103, 102, 103, 104, 103, 104, 104, 105, 104, 104, 0, 0, 0, 0, 104, 104, 105, 105, 105, 105, 105, 105, 105, 104, 104, 104, 104, 104, 105, 105, 105, 105, 104, 104, 105, 104, 105, 105, 104, 104, 104, 0], [0, 0, 0, 0, 0, 105, 104, 104, 104, 104, 104, 105, 105, 103, 104, 104, 105, 105, 105, 104, 105, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 105, 104, 105, 104, 105, 104, 105, 105, 0, 105, 105, 104, 104, 105, 105, 104, 102, 104, 104, 104, 103, 104, 104, 103, 103, 104, 105, 104, 105, 104, 104, 104, 0, 0, 0, 0, 104, 104, 104, 105, 105, 105, 105, 105, 105, 104, 104, 104, 104, 103, 104, 105, 104, 104, 104, 104, 104, 105, 104, 104, 104, 104, 0, 0], [0, 0, 0, 0, 0, 0, 105, 104, 105, 104, 104, 104, 105, 103, 104, 104, 104, 105, 103, 104, 104, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 105, 105, 104, 104, 104, 104, 104, 104, 104, 104, 105, 104, 104, 105, 105, 105, 103, 104, 104, 104, 105, 104, 104, 104, 104, 104, 104, 0, 0, 105, 104, 104, 0, 0, 0, 0, 105, 104, 104, 105, 105, 104, 105, 104, 105, 104, 104, 103, 103, 104, 105, 104, 104, 105, 104, 104, 104, 104, 104, 104, 104, 104, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 104, 104, 104, 105, 104, 104, 104, 104, 104, 104, 104, 104, 104, 105, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 105, 105, 105, 105, 104, 105, 104, 104, 104, 104, 104, 104, 105, 105, 105, 105, 105, 104, 104, 104, 104, 105, 104, 104, 104, 104, 104, 0, 0, 0, 0, 104, 104, 104, 0, 0, 105, 104, 104, 104, 104, 105, 105, 104, 104, 105, 104, 104, 104, 104, 103, 104, 105, 105, 105, 105, 104, 104, 104, 104, 103, 104, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 103, 105, 105, 105, 103, 104, 104, 104, 104, 104, 104, 105, 106, 106, 0, 0, 0, 0, 0, 0, 0, 0, 105, 105, 105, 105, 104, 103, 104, 104, 105, 104, 105, 104, 105, 104, 103, 105, 104, 104, 103, 105, 105, 104, 103, 104, 104, 104, 103, 104, 103, 105, 105, 0, 0, 0, 0, 104, 104, 104, 105, 104, 104, 104, 104, 104, 103, 105, 104, 105, 104, 104, 105, 104, 104, 103, 103, 102, 104, 105, 104, 105, 105, 104, 104, 104, 104, 104, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 103, 104, 104, 103, 104, 104, 105, 104, 105, 104, 104, 104, 105, 105, 0, 0, 0, 0, 0, 0, 0, 104, 105, 105, 105, 105, 105, 104, 103, 104, 104, 104, 104, 104, 104, 104, 103, 104, 104, 105, 106, 105, 105, 104, 104, 104, 104, 104, 104, 104, 105, 105, 104, 105, 0, 0, 104, 104, 104, 104, 104, 104, 104, 104, 104, 103, 104, 104, 104, 104, 105, 104, 105, 104, 104, 104, 104, 104, 105, 106, 105, 105, 105, 104, 104, 104, 104, 104, 104, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 104, 104, 104, 104, 104, 105, 104, 104, 105, 105, 104, 104, 105, 0, 0, 0, 0, 0, 0, 0, 0, 104, 104, 103, 104, 105, 105, 104, 104, 105, 104, 104, 104, 103, 105, 104, 104, 105, 104, 104, 105, 105, 105, 104, 105, 104, 104, 104, 105, 106, 105, 104, 105, 104, 104, 105, 105, 105, 104, 105, 105, 104, 104, 104, 104, 103, 103, 104, 104, 104, 104, 104, 105, 104, 105, 105, 105, 105, 105, 105, 105, 104, 104, 103, 104, 104, 104, 104, 104, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 105, 105, 104, 103, 105, 105, 104, 104, 105, 104, 103, 105, 105, 0, 0, 0, 0, 0, 0, 0, 0, 0, 105, 104, 104, 104, 105, 105, 105, 105, 105, 105, 104, 104, 104, 104, 104, 104, 104, 104, 104, 105, 105, 103, 0, 0, 105, 104, 105, 105, 105, 105, 103, 104, 105, 104, 104, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 104, 104, 104, 104, 104, 104, 104, 105, 104, 104, 105, 105, 103, 105, 105, 104, 104, 104, 104, 105, 105, 103, 104, 0, 0], [0, 0, 0, 0, 0, 0, 0, 105, 103, 104, 105, 104, 105, 105, 105, 105, 104, 104, 105, 105, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 105, 105, 105, 105, 105, 105, 104, 104, 105, 104, 105, 105, 104, 105, 105, 104, 104, 104, 105, 105, 0, 0, 0, 0, 104, 105, 104, 105, 105, 104, 105, 104, 105, 105, 105, 105, 102, 103, 105, 104, 105, 105, 105, 105, 104, 104, 105, 105, 105, 104, 104, 105, 104, 104, 105, 105, 105, 105, 104, 104, 104, 104, 104, 104, 105, 105, 104, 103, 0], [0, 0, 0, 0, 0, 0, 0, 104, 104, 105, 105, 106, 104, 105, 105, 104, 105, 104, 104, 105, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 105, 105, 105, 105, 104, 105, 105, 105, 105, 105, 104, 105, 104, 104, 104, 104, 103, 104, 103, 0, 0, 0, 0, 104, 104, 105, 105, 104, 104, 104, 104, 104, 105, 104, 104, 103, 104, 103, 105, 105, 105, 105, 105, 105, 104, 105, 105, 105, 105, 105, 104, 104, 104, 103, 104, 104, 104, 104, 105, 104, 105, 105, 105, 103, 104, 105, 104, 0], [0, 0, 0, 0, 0, 0, 104, 103, 104, 105, 105, 104, 104, 105, 104, 104, 104, 105, 105, 105, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 105, 104, 105, 105, 104, 105, 105, 104, 104, 104, 104, 104, 105, 105, 105, 104, 104, 104, 103, 103, 0, 0, 104, 104, 104, 105, 105, 105, 104, 104, 104, 105, 105, 105, 104, 104, 104, 104, 105, 105, 105, 105, 104, 104, 104, 105, 105, 104, 105, 105, 105, 104, 104, 104, 104, 105, 105, 105, 104, 104, 105, 104, 103, 103, 103, 104, 105, 0], [0, 0, 0, 0, 0, 0, 103, 104, 104, 105, 104, 104, 104, 104, 104, 104, 104, 105, 105, 105, 104, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 105, 105, 104, 104, 104, 104, 104, 104, 104, 104, 104, 105, 104, 104, 105, 104, 105, 104, 105, 104, 104, 104, 104, 104, 104, 105, 105, 103, 104, 104, 104, 104, 105, 104, 105, 104, 105, 105, 104, 105, 105, 103, 103, 104, 104, 104, 104, 105, 105, 104, 105, 103, 104, 104, 104, 104, 105, 106, 104, 103, 104, 104, 104, 103, 103, 104, 105, 0], [0, 0, 0, 0, 0, 0, 105, 103, 105, 105, 105, 104, 103, 104, 104, 105, 104, 105, 105, 104, 104, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 105, 104, 104, 104, 104, 104, 103, 104, 104, 104, 104, 104, 103, 104, 105, 104, 104, 104, 104, 104, 105, 104, 104, 104, 104, 105, 105, 104, 104, 104, 104, 104, 104, 104, 104, 105, 105, 104, 105, 105, 105, 105, 105, 104, 104, 103, 103, 104, 105, 105, 104, 104, 104, 105, 104, 104, 104, 104, 105, 104, 103, 105, 104, 104, 104, 105, 104, 0], [0, 0, 0, 0, 0, 0, 105, 104, 105, 105, 103, 104, 104, 104, 104, 105, 105, 104, 104, 105, 105, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 104, 105, 105, 104, 104, 104, 105, 104, 104, 104, 104, 104, 104, 104, 105, 105, 104, 104, 105, 105, 104, 104, 104, 104, 104, 105, 105, 104, 104, 105, 103, 104, 104, 104, 104, 104, 104, 103, 105, 104, 105, 105, 105, 105, 105, 104, 103, 105, 105, 105, 105, 103, 104, 104, 104, 103, 104, 103, 105, 105, 105, 104, 105, 104, 104, 105, 104, 104, 0], [0, 0, 0, 0, 0, 0, 105, 104, 104, 104, 105, 105, 105, 104, 105, 104, 104, 103, 103, 104, 105, 0, 0, 0, 0, 0, 0, 0, 104, 105, 105, 103, 104, 103, 103, 104, 105, 105, 104, 104, 104, 104, 104, 104, 104, 104, 105, 104, 105, 104, 104, 105, 105, 104, 105, 105, 105, 105, 104, 104, 104, 104, 103, 104, 104, 104, 104, 104, 104, 105, 105, 105, 105, 104, 105, 104, 103, 103, 103, 104, 105, 105, 105, 104, 104, 104, 104, 105, 105, 105, 105, 105, 105, 105, 104, 104, 104, 104, 0, 0], [0, 0, 0, 0, 0, 0, 104, 104, 103, 104, 105, 105, 105, 104, 105, 104, 104, 103, 104, 104, 104, 0, 0, 0, 0, 0, 0, 105, 105, 104, 105, 104, 103, 104, 104, 103, 105, 105, 105, 104, 104, 103, 104, 104, 104, 105, 105, 105, 104, 105, 105, 105, 105, 105, 104, 103, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 105, 105, 104, 105, 105, 105, 104, 105, 103, 104, 104, 104, 105, 105, 105, 104, 104, 105, 105, 0, 0, 105, 105, 105, 103, 104, 104, 105, 104, 0, 0], [0, 0, 0, 0, 0, 105, 105, 103, 104, 105, 105, 105, 105, 105, 104, 103, 103, 104, 104, 104, 0, 0, 0, 0, 0, 0, 0, 105, 104, 104, 105, 104, 104, 104, 104, 105, 105, 104, 104, 104, 103, 103, 105, 104, 105, 105, 105, 105, 104, 105, 105, 104, 105, 105, 104, 104, 104, 104, 103, 103, 104, 105, 103, 104, 104, 104, 104, 104, 104, 105, 104, 105, 103, 105, 105, 105, 105, 104, 104, 105, 103, 104, 105, 105, 105, 105, 105, 0, 0, 0, 0, 105, 105, 103, 103, 105, 104, 104, 104, 0], [0, 0, 0, 0, 104, 105, 105, 105, 106, 105, 105, 105, 103, 104, 104, 103, 105, 105, 105, 104, 0, 0, 0, 0, 0, 0, 0, 105, 104, 105, 105, 105, 105, 104, 105, 105, 105, 104, 104, 104, 103, 104, 105, 105, 105, 105, 105, 105, 104, 104, 105, 105, 105, 104, 104, 104, 104, 104, 104, 105, 104, 104, 104, 104, 104, 104, 105, 105, 104, 104, 105, 104, 104, 104, 104, 105, 104, 103, 104, 103, 104, 104, 105, 105, 105, 105, 104, 0, 0, 0, 0, 105, 105, 103, 104, 104, 104, 104, 104, 0], [0, 0, 0, 0, 104, 105, 105, 104, 105, 105, 105, 105, 105, 105, 104, 104, 104, 104, 104, 105, 0, 0, 0, 0, 0, 0, 0, 105, 104, 104, 105, 105, 104, 106, 104, 105, 105, 104, 105, 104, 104, 104, 105, 105, 105, 105, 105, 104, 104, 104, 104, 105, 105, 105, 104, 104, 104, 104, 104, 105, 104, 104, 104, 104, 104, 105, 104, 104, 104, 104, 104, 104, 104, 104, 105, 105, 105, 105, 103, 104, 103, 104, 104, 103, 104, 103, 104, 105, 0, 0, 0, 104, 104, 103, 104, 105, 104, 104, 104, 0], [0, 0, 0, 0, 0, 105, 103, 105, 104, 105, 104, 104, 104, 105, 105, 105, 105, 104, 104, 105, 0, 0, 0, 0, 0, 0, 0, 0, 105, 104, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 104, 104, 105, 105, 105, 104, 104, 104, 104, 105, 104, 105, 105, 105, 105, 105, 105, 105, 104, 105, 104, 104, 104, 105, 104, 104, 105, 105, 105, 105, 104, 105, 103, 104, 104, 104, 105, 104, 105, 104, 103, 104, 104, 102, 103, 103, 104, 105, 0, 0, 0, 0, 103, 104, 104, 105, 105, 104, 103, 0], [0, 0, 0, 0, 0, 104, 104, 104, 104, 105, 104, 104, 105, 105, 105, 105, 104, 103, 104, 104, 104, 0, 0, 0, 0, 0, 0, 0, 0, 104, 102, 105, 105, 103, 105, 105, 105, 105, 105, 105, 104, 104, 105, 105, 104, 105, 105, 104, 104, 104, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 104, 104, 105, 105, 105, 105, 104, 105, 104, 105, 104, 106, 105, 104, 105, 104, 104, 105, 104, 105, 104, 105, 104, 104, 103, 104, 105, 0, 0, 0, 0, 0, 104, 104, 104, 105, 105, 104, 0], [0, 0, 0, 0, 0, 105, 105, 104, 105, 105, 104, 105, 105, 104, 103, 105, 104, 104, 104, 104, 105, 0, 0, 0, 0, 0, 0, 0, 0, 103, 104, 105, 104, 105, 104, 105, 105, 104, 104, 104, 104, 104, 104, 104, 105, 106, 105, 104, 105, 104, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 101, 104, 104, 105, 103, 104, 104, 104, 104, 104, 105, 106, 106, 104, 105, 104, 104, 104, 104, 105, 105, 105, 104, 104, 104, 105, 105, 104, 0, 0, 0, 0, 0, 104, 105, 105, 105, 102, 0], [0, 0, 0, 0, 0, 0, 104, 104, 105, 104, 105, 105, 105, 105, 105, 105, 105, 104, 105, 104, 104, 0, 0, 0, 0, 0, 0, 0, 0, 105, 105, 105, 105, 105, 105, 104, 104, 104, 104, 105, 105, 104, 104, 0, 0, 0, 106, 104, 104, 105, 104, 105, 105, 104, 104, 105, 105, 104, 105, 105, 105, 105, 104, 105, 104, 103, 104, 104, 103, 104, 105, 104, 104, 105, 105, 103, 105, 104, 104, 105, 105, 105, 105, 105, 105, 104, 105, 104, 104, 0, 0, 0, 0, 0, 104, 106, 105, 105, 0, 0], [0, 0, 0, 0, 0, 0, 104, 104, 105, 104, 105, 105, 106, 105, 105, 105, 105, 105, 103, 105, 104, 103, 0, 0, 0, 0, 0, 0, 0, 105, 105, 104, 105, 105, 104, 104, 0, 0, 105, 104, 106, 105, 0, 0, 0, 0, 0, 104, 104, 105, 104, 103, 105, 105, 104, 104, 105, 105, 105, 105, 104, 104, 105, 105, 105, 104, 105, 104, 104, 103, 105, 105, 105, 105, 102, 104, 104, 104, 104, 104, 104, 105, 104, 104, 105, 105, 104, 104, 104, 104, 0, 0, 0, 0, 104, 104, 105, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 105, 105, 104, 103, 104, 105, 105, 105, 105, 104, 103, 105, 105, 104, 103, 104, 0, 0, 0, 0, 0, 0, 105, 104, 105, 105, 105, 103, 0, 0, 0, 0, 105, 104, 105, 0, 0, 0, 0, 0, 104, 104, 104, 105, 103, 103, 105, 104, 104, 105, 105, 104, 105, 105, 104, 105, 105, 105, 104, 105, 105, 104, 105, 105, 105, 105, 105, 105, 103, 104, 104, 0, 104, 105, 104, 104, 104, 105, 105, 104, 105, 105, 105, 104, 0, 0, 104, 105, 104, 104, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 104, 104, 104, 104, 106, 105, 105, 106, 105, 105, 105, 104, 104, 103, 104, 103, 0, 0, 0, 0, 0, 0, 0, 105, 105, 105, 105, 105, 0, 0, 0, 0, 105, 104, 104, 105, 0, 0, 0, 0, 103, 105, 105, 105, 105, 105, 104, 104, 104, 105, 105, 104, 104, 104, 104, 104, 104, 104, 104, 105, 105, 105, 106, 105, 104, 105, 105, 105, 105, 104, 0, 0, 0, 104, 104, 103, 104, 105, 105, 105, 105, 103, 104, 104, 104, 105, 105, 104, 105, 105, 104, 0, 0], [0, 0, 0, 0, 0, 0, 105, 104, 104, 103, 105, 105, 105, 104, 105, 105, 104, 105, 104, 104, 104, 104, 104, 0, 0, 0, 0, 0, 0, 0, 0, 104, 104, 105, 104, 105, 0, 0, 105, 104, 104, 105, 105, 103, 0, 0, 104, 104, 105, 104, 105, 105, 105, 104, 104, 104, 104, 104, 105, 104, 104, 105, 104, 104, 104, 104, 105, 104, 104, 104, 104, 103, 105, 105, 105, 104, 105, 0, 0, 0, 105, 105, 105, 104, 104, 106, 105, 102, 103, 104, 104, 105, 105, 104, 104, 105, 105, 105, 0, 0], [0, 0, 0, 104, 104, 105, 104, 105, 104, 104, 105, 105, 104, 104, 104, 104, 104, 104, 105, 105, 104, 104, 105, 0, 0, 0, 0, 0, 0, 0, 0, 104, 105, 105, 104, 105, 105, 105, 105, 105, 105, 105, 104, 105, 104, 104, 104, 104, 104, 104, 102, 105, 105, 104, 105, 105, 104, 105, 104, 106, 104, 105, 105, 105, 105, 104, 104, 105, 104, 103, 104, 104, 105, 105, 105, 104, 104, 0, 0, 104, 105, 105, 104, 104, 104, 104, 105, 103, 103, 104, 104, 104, 103, 105, 104, 105, 105, 104, 104, 0], [0, 0, 105, 104, 105, 105, 105, 105, 105, 105, 105, 105, 105, 103, 104, 104, 104, 105, 104, 105, 104, 104, 104, 104, 0, 0, 0, 0, 0, 0, 0, 104, 105, 104, 104, 105, 105, 104, 104, 105, 105, 105, 104, 104, 104, 104, 104, 104, 105, 104, 104, 104, 104, 105, 104, 105, 105, 105, 104, 105, 105, 105, 105, 104, 103, 103, 104, 104, 105, 104, 103, 104, 104, 105, 104, 104, 103, 0, 0, 104, 103, 104, 105, 105, 104, 104, 105, 105, 104, 104, 104, 104, 103, 104, 105, 105, 105, 105, 103, 0], [0, 0, 104, 104, 105, 105, 105, 105, 105, 104, 105, 105, 105, 105, 105, 104, 104, 104, 105, 105, 105, 103, 105, 104, 104, 104, 104, 104, 0, 0, 0, 105, 105, 105, 105, 104, 105, 104, 104, 104, 105, 105, 105, 103, 105, 104, 105, 104, 104, 104, 104, 104, 105, 105, 105, 103, 104, 103, 105, 105, 104, 103, 104, 105, 104, 104, 105, 104, 105, 105, 105, 105, 105, 104, 104, 104, 104, 0, 0, 105, 105, 105, 104, 104, 104, 105, 104, 105, 105, 104, 104, 104, 105, 104, 104, 104, 105, 104, 105, 0], [0, 0, 104, 105, 105, 105, 104, 104, 105, 105, 104, 104, 104, 104, 104, 105, 104, 104, 105, 105, 104, 105, 105, 104, 104, 104, 103, 105, 104, 103, 104, 104, 105, 105, 104, 105, 105, 105, 104, 105, 105, 104, 105, 103, 104, 104, 105, 104, 104, 105, 105, 105, 105, 105, 103, 105, 104, 105, 105, 105, 105, 104, 104, 104, 104, 104, 105, 105, 105, 106, 105, 105, 104, 102, 105, 105, 105, 105, 104, 105, 106, 104, 104, 103, 105, 105, 104, 104, 105, 104, 104, 103, 105, 105, 104, 104, 105, 104, 104, 0], [0, 0, 104, 104, 104, 104, 104, 104, 104, 104, 104, 102, 105, 104, 104, 104, 104, 105, 105, 104, 104, 104, 105, 105, 104, 105, 104, 104, 104, 104, 105, 104, 104, 105, 105, 105, 104, 104, 105, 105, 104, 104, 104, 105, 105, 104, 104, 104, 104, 103, 105, 104, 105, 104, 104, 104, 105, 104, 105, 105, 105, 105, 105, 104, 105, 105, 105, 105, 103, 105, 105, 104, 103, 104, 105, 104, 105, 105, 106, 104, 105, 103, 103, 104, 104, 105, 105, 105, 105, 104, 104, 105, 104, 105, 104, 104, 105, 105, 105, 0], [0, 0, 0, 104, 105, 103, 104, 104, 104, 104, 104, 103, 105, 104, 104, 105, 104, 104, 105, 105, 104, 105, 104, 104, 104, 105, 105, 105, 104, 104, 105, 105, 106, 104, 104, 105, 105, 105, 105, 104, 104, 104, 104, 104, 105, 105, 104, 104, 104, 104, 104, 105, 104, 104, 104, 104, 105, 105, 105, 105, 105, 104, 105, 104, 104, 105, 104, 105, 105, 105, 104, 105, 105, 104, 104, 105, 105, 105, 106, 105, 104, 104, 105, 104, 105, 104, 104, 103, 104, 104, 105, 105, 105, 105, 104, 105, 105, 106, 0, 0], [0, 0, 0, 103, 103, 104, 104, 105, 104, 103, 104, 105, 105, 104, 104, 104, 103, 104, 105, 105, 105, 105, 105, 105, 104, 104, 105, 105, 104, 104, 104, 105, 105, 104, 105, 105, 105, 105, 0, 0, 0, 103, 104, 105, 105, 105, 105, 105, 103, 104, 104, 105, 104, 104, 104, 104, 104, 105, 105, 105, 106, 105, 105, 105, 105, 104, 105, 105, 103, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 104, 105, 105, 105, 105, 105, 104, 105, 105, 105, 105, 104, 105, 105, 104, 104, 105, 105, 0, 0], [0, 0, 0, 104, 102, 103, 105, 104, 103, 104, 104, 105, 104, 104, 104, 0, 104, 104, 105, 105, 105, 104, 104, 104, 103, 104, 105, 105, 104, 104, 104, 104, 104, 104, 104, 105, 105, 0, 0, 0, 0, 0, 103, 105, 105, 104, 105, 105, 103, 103, 104, 105, 105, 103, 104, 105, 105, 105, 105, 105, 105, 106, 105, 105, 105, 104, 105, 104, 105, 104, 104, 105, 105, 105, 105, 104, 105, 105, 105, 105, 105, 105, 105, 105, 104, 104, 105, 105, 105, 105, 104, 104, 104, 104, 104, 104, 104, 105, 0, 0], [0, 0, 0, 104, 104, 103, 104, 105, 105, 105, 104, 104, 105, 106, 0, 0, 0, 104, 104, 104, 105, 104, 104, 104, 103, 104, 103, 104, 104, 105, 105, 104, 104, 105, 104, 105, 0, 0, 0, 0, 0, 0, 0, 105, 105, 105, 105, 105, 104, 103, 104, 104, 103, 103, 104, 105, 105, 105, 104, 105, 105, 106, 104, 104, 103, 104, 104, 104, 105, 104, 105, 104, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 104, 105, 104, 105, 105, 105, 105, 105, 105, 104, 104, 105, 105, 0, 0, 0], [0, 0, 0, 104, 104, 104, 104, 105, 105, 105, 104, 105, 104, 104, 0, 0, 0, 103, 104, 104, 104, 105, 105, 104, 104, 104, 104, 104, 103, 104, 104, 104, 104, 104, 105, 105, 0, 0, 0, 0, 0, 0, 0, 0, 105, 104, 104, 105, 105, 105, 105, 104, 104, 104, 104, 104, 105, 104, 105, 104, 104, 104, 103, 105, 104, 103, 104, 104, 105, 105, 105, 104, 104, 105, 105, 104, 104, 104, 103, 105, 105, 105, 104, 105, 105, 104, 105, 104, 104, 105, 105, 104, 104, 104, 105, 105, 105, 0, 0, 0], [0, 0, 0, 104, 104, 104, 104, 105, 104, 104, 105, 104, 103, 103, 0, 0, 0, 105, 104, 105, 105, 105, 105, 104, 104, 104, 104, 103, 103, 104, 104, 104, 105, 105, 105, 105, 0, 0, 0, 0, 0, 0, 0, 0, 0, 105, 105, 105, 104, 105, 105, 104, 104, 104, 104, 105, 103, 104, 105, 105, 104, 104, 105, 104, 105, 104, 104, 105, 105, 104, 104, 104, 103, 104, 104, 104, 103, 104, 104, 104, 104, 105, 105, 104, 104, 104, 104, 105, 0, 105, 105, 104, 105, 104, 105, 104, 103, 0, 0, 0], [0, 0, 0, 0, 105, 104, 105, 0, 0, 0, 104, 103, 104, 0, 0, 0, 0, 0, 106, 105, 104, 105, 0, 0, 104, 105, 104, 104, 104, 105, 104, 0, 0, 104, 105, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 104, 105, 104, 105, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 105, 104, 104, 104, 103, 104, 0, 0, 105, 104, 105, 104, 104, 103, 104, 102, 104, 104, 104, 103, 105, 105, 106, 104, 104, 103, 104, 0, 0, 0, 104, 105, 105, 105, 103, 103, 104, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 104, 105, 0, 0, 0, 0, 105, 104, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 104, 104, 104, 103, 103, 102, 104, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 104, 104, 104, 0, 0, 0, 0, 104, 104, 104, 103, 105, 105, 104, 104, 103, 104, 0, 0, 0, 0, 0, 105, 105, 105, 104, 104, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]}]";
    }

    /*// Imported function from C++ library for receiving data
    [DllImport("NetworkingLibrary.so")]
    public static extern IntPtr receiveData();

    // Imported function from C++ library for sending data
    [DllImport("NetworkingLibrary.so")]
    public static extern void sendDataUDP(string data);*/

    //On Linux, send data to C++ file
    private void send_data()
    {
        var tcp = create_sending_json(Protocol.TCP);
        var udp = create_sending_json(Protocol.UDP);
        if (Application.platform == RuntimePlatform.LinuxPlayer)
        {
            if (tcp != "[]")
                TCP_Send(tcp, tcp.Length);
            UDP_SendData(udp, udp.Length);
        }
        if (tcp != "[]")
            lastTCP = tcp;
        if (udp != "[]")
            lastUDP = udp;
    }

    //Receive a packet from C++ networking client code
    private string receive_data()
    {
        //On Linux, get a proper packet
        if (Application.platform == RuntimePlatform.LinuxPlayer) {
            result = Marshal.PtrToStringAnsi(UDP_GetData());
        } else {
            //On Windows, return whatever JSON data we want to generate/test for
            result = "[]";
        }

        return result;
    }

    //Generate the JSON file to send to C++ networking client code
    private string create_sending_json(Protocol protocol)
    {
        //Open JSON array
        string sending = "[";

        if (protocol == Protocol.UDP)
        {
            if (GameManager.instance.player != null)
            {
                //Add player data
                var memberItems = new List<Pair<string, string>>();
                memberItems.Add(new Pair<string, string>("x", GameManager.instance.player.transform.position.x.ToString()));
                memberItems.Add(new Pair<string, string>("y", GameManager.instance.player.transform.position.y.ToString()));
                memberItems.Add(new Pair<string, string>("rotationZ", GameManager.instance.player.transform.rotation.z.ToString()));
                memberItems.Add(new Pair<string, string>("rotationW", GameManager.instance.player.transform.rotation.w.ToString()));
                
                send_next_packet(DataType.Player, GameManager.instance.player.GetComponent<BaseClass>().playerID, memberItems, protocol);
            }
        }

        //Add data that external sources want to send
        foreach (var item in protocol == Protocol.TCP ? jsonTCPObjectsToSend : jsonUDPObjectsToSend)
        {
            sending += item;
        }

        if (protocol == Protocol.TCP)
            jsonTCPObjectsToSend.Clear();
        else
            jsonUDPObjectsToSend.Clear();

        //Close json array
        if (sending.Length > 2)
            sending = sending.Remove(sending.Length - 1, 1);
        sending += "]";

        return sending;
    }

    //Add data to be sent
    public static string send_next_packet(DataType type, int id, List<Pair<string, string>> memersToSend, Protocol protocol)
    {
        string sending = "";
        if (protocol == Protocol.NA)
            sending += "[";
        sending += "{";
        sending += "\"DataType\" : " + (int)type + ", \"ID\" : " + id + ",";

        foreach (var pair in memersToSend)
        {
            sending += " \"" + pair.first + "\" : " + pair.second + ",";
        }
        //if (protocol != Protocol.NA)
        //    sending = sending.Remove(1, 1);
        sending = sending.Remove(sending.Length - 1, 1);
        if (protocol != Protocol.NA)
            sending += "},";
        else
            sending += "}]";

        switch (protocol)
        {
            case Protocol.UDP:
                jsonUDPObjectsToSend.Add(sending);
                break;
            case Protocol.TCP:
                jsonTCPObjectsToSend.Add(sending);
                break;
        }
        return sending;
    }
    #endregion 

    ////Game creation code
    #region StartOfGame

    public static void StartGame()
    {
        try
        {
            UDPClient = UDP_CreateClient();
            UDP_ConnectToServer(GameData.IP, 8000);
            UDP_StartReadThread();
        }
        catch (Exception)
        {
            //On Windows
        }
    }

    #endregion

    ////Code for Carson's testing purposes////
    #region DummyTestingCode
    //Dummy data for the sake of testing.
    string result = "receiving failed";
    string lastUDP = "Last UDP";
    string lastTCP = "Last TCP";
    
    void OnGUI()
    {
        GUI.Label(new Rect(450, 0, Screen.width, Screen.height), "Last Received: " + result);
        GUI.Label(new Rect(450, 20, Screen.width, Screen.height), "UDP Sending: " + lastUDP);
        GUI.Label(new Rect(450, 40, Screen.width, Screen.height), "TCP Sending: " + lastTCP);
    }

    #endregion
}